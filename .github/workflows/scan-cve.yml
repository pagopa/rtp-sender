# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, builds an image, performs a container image
# vulnerability scan with Trivy tool, and integrates the results with GitHub Advanced Security
# code scanning feature.
name: Container Scan

on:
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '00 07 * * *'
  workflow_dispatch:


permissions:
  contents: read

env:
  DOCKERFILE: src/main/docker/Dockerfile

jobs:
  BuildAndScan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    outputs:
        CVE_CRITICAL: ${{env.CVE_CRITICAL}}
        CVE_HIGH: ${{env.CVE_HIGH}}
        CVE_MEDIUM: ${{env.CVE_MEDIUM}}
    steps:
      - name: "Checkout the code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2

      - name: "Build the Docker image"
        run: docker build . --file ${{ env.DOCKERFILE }} --target cve --tag localbuild/testimage:latest

      - name: "Run the Trivy scan action itself with GitHub Advanced Security code scanning integration enabled"
        id: scan
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # v0.32.0
        with:
          image-ref: "localbuild/testimage:latest"
          format: 'sarif'
          output: 'results.sarif'

      - name: "Upload Anchore Scan Report"
        uses: github/codeql-action/upload-sarif@9b02dc2f60288b463e7a66e39c78829b62780db7 # CodeQL Bundle v2.22.1
        with:
          sarif_file: 'results.sarif'

      - name: "CVE Description extraction and print"
        run: |
          echo -e "\033[1m====== CRITICAL and HIGH ======\033[0m"
          jq -r '.runs[].results[] | select(.level == "error") | "\(.ruleId) - \(.message.text)"' results.sarif || echo "None"

          echo -e "\033[1m====== MEDIUM ======\033[0m"
          jq -r '.runs[].results[] | select(.level == "warning") | "\(.ruleId) - \(.message.text)"' results.sarif || echo "None"

          echo -e "\033[1m====== LOW ======\033[0m"
          jq -r '.runs[].results[] | select(.level == "note") | "\(.ruleId) - \(.message.text)"' results.sarif || echo "None"

      - name: "Fails if CVE HIGH or CRITICAL are detected"
        id: cve-threshold
        if: env.CVE_HIGH > 0 || env.CVE_CRITICAL > 0
        run: exit 1

  SendSlackNotification:
    needs: BuildAndScan
    uses: ./.github/workflows/send-notification.yml
    if: github.event_name == 'schedule' && needs.BuildAndScan.steps.cve-threshold.outcome == 'failure'
    with:
      CVE_CRITICAL: ${{needs.BuildAndScan.outputs.CVE_CRITICAL}}
      CVE_HIGH: ${{needs.BuildAndScan.outputs.CVE_HIGH}}
      CVE_MEDIUM: ${{needs.BuildAndScan.outputs.CVE_MEDIUM}}
    secrets: inherit